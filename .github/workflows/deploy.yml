name: Deploy Django App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: replace

      - name: Prepare remote environment
        env:
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_PORT: ${{ secrets.SERVER_PORT }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "\
            cd $REMOTE_DIR && \
            git fetch origin && \
            git checkout main && \
            git pull origin main"

      - name: Prepare directories and permissions
        env:
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_PORT: ${{ secrets.SERVER_PORT }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "\
            cd $REMOTE_DIR && \
            # Ensure database file exists and has proper permissions
            touch db.sqlite3 && \
            chmod 666 db.sqlite3 && \
            # Create media directory if it doesn't exist
            mkdir -p media && \
            chmod 777 media"

      - name: Clean up existing containers
        env:
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_PORT: ${{ secrets.SERVER_PORT }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "\
            echo 'Stopping and removing existing containers...' && \
            docker stop my-django-app redis || true && \
            docker rm my-django-app redis || true"

      - name: Deploy with Docker Compose
        env:
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_PORT: ${{ secrets.SERVER_PORT }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "\
            cd $REMOTE_DIR && \
            echo 'Building and starting containers...' && \
            docker compose build && \
            docker compose up -d"

      - name: Verify deployment
        env:
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_PORT: ${{ secrets.SERVER_PORT }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "\
            cd $REMOTE_DIR && \
            echo 'Checking container status:' && \
            docker compose ps && \
            echo 'Checking Redis connection:' && \
            docker exec redis redis-cli ping || echo 'Redis check failed' && \
            echo 'Checking Django app logs:' && \
            docker logs my-django-app --tail 20"

      - name: Deployment notification
        if: always()
        env:
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_PORT: ${{ secrets.SERVER_PORT }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "Deployment completed successfully"
          else
            echo "Deployment failed"
            ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "\
              cd $REMOTE_DIR && \
              echo 'Checking container status after failure:' && \
              docker compose ps && \
              echo 'Container logs:' && \
              docker compose logs --tail 50"
          fi
